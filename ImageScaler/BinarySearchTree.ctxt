#BlueJ class context
comment0.params=
comment0.target=BinarySearchTree()
comment1.params=
comment1.target=boolean\ isEmpty()
comment10.params=
comment10.target=java.util.List\ preorderTraverse()
comment11.params=tree\ list
comment11.target=java.util.List\ preorderTraverse(BinaryNode,\ java.util.List)
comment12.params=
comment12.target=java.util.List\ inorderTraverse()
comment13.params=tree\ list
comment13.target=java.util.List\ inorderTraverse(BinaryNode,\ java.util.List)
comment14.params=
comment14.target=java.util.List\ postorderTraverse()
comment15.params=tree\ list
comment15.target=java.util.List\ postorderTraverse(BinaryNode,\ java.util.List)
comment16.params=element
comment16.target=void\ remove(java.lang.Comparable)
comment17.params=element\ tree
comment17.target=BinaryNode\ remove(java.lang.Comparable,\ BinaryNode)
comment18.params=tree
comment18.target=BinaryNode\ removeNode(BinaryNode)
comment19.params=tree
comment19.target=java.lang.Comparable\ getPredecessor(BinaryNode)
comment2.params=
comment2.target=int\ size()
comment20.params=
comment20.target=void\ balance()
comment21.params=low\ high\ list
comment21.target=void\ refillTree(int,\ int,\ java.util.List)
comment3.params=tree
comment3.target=int\ size(BinaryNode)
comment4.params=element
comment4.target=void\ add(java.lang.Comparable)
comment5.params=element\ tree
comment5.target=BinaryNode\ add(java.lang.Comparable,\ BinaryNode)
comment6.params=element
comment6.target=boolean\ contains(java.lang.Comparable)
comment7.params=element\ tree
comment7.target=boolean\ contains(java.lang.Comparable,\ BinaryNode)
comment8.params=
comment8.target=java.lang.String\ toString()
comment9.params=tree\ level
comment9.target=java.lang.String\ toString(BinaryNode,\ int)
numComments=22
